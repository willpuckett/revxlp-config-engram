/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define NUM_L 2
#define KP_L 3
#define MED_L 4
#define FUN_L 5

#define KEYS_L 0 1 2 3 4  5  12 13 14 15 16 17 24 25 26 27 28 29   // left-hand keys
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35   // right-hand keys
#define THUMBS 36 37 38 39 40 41

#define HM_TAPPING_TERM 1000
#define HM_TAPPING_TERM_FAST 200
#define HM_TAPPING_TERM_QT 175

/ {
  behaviors {

    hrml: home_row_mod_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_LEFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        hold-trigger-key-positions = < KEYS_R THUMBS >;
        hold-trigger-on-release;
        bindings = <&kp>, <&kp>;
        };

    hrmr: home_row_mod_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_RIGHT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM>;
        hold-trigger-key-positions = < KEYS_L THUMBS >;
        hold-trigger-on-release;
        bindings = <&kp>, <&kp>;
        };

    hrmls: home_row_mod_left_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_LEFT_SHIFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick_tap_ms = <HM_TAPPING_TERM_QT>;
        hold-trigger-key-positions = < KEYS_R THUMBS >;
        bindings = <&kp>, <&kp>;
        };

    hrmrs: home_row_mod_right_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "HOME_ROW_MOD_RIGHT_SHIFT";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <HM_TAPPING_TERM_FAST>;
        quick_tap_ms = <HM_TAPPING_TERM_QT>;
        hold-trigger-key-positions = < KEYS_L THUMBS >;
        bindings = <&kp>, <&kp>;
        };

    mqt: momentary-quick-tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MOMENTARY_QUICK_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <125>;
        global-quick-tap;
        bindings = <&mo>, <&kp>;
        };

    cwe: tap_dance_mod_tap {
        compatible = "zmk,behavior-tap-dance";
        label = "CAPS-WORD-DOUBLE_TAP";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp ESC>, <&caps_word>;
        };

    sqt_lpar: single-quote-left-paren {
        compatible = "zmk,behavior-mod-morph";
        label = "SINGLE_QUOTE_LEFT_PAREN";
        #binding-cells = <0>;
        bindings = <&kp SQT>, <&kp LPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    dqt_rpar: double-quote-right-paren {
        compatible = "zmk,behavior-mod-morph";
        label = "DOUBLE_QUOTE_RIGHT_PAREN";
        #binding-cells = <0>;
        bindings = <&kp DQT>, <&kp RPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    cma_semi: comma-semicolon {
        compatible = "zmk,behavior-mod-morph";
        label = "COMMA_SEMICOLON";
        #binding-cells = <0>;
        bindings = <&kp COMMA>, <&kp SEMI>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    stop_colon: stop-colon {
        compatible = "zmk,behavior-mod-morph";
        label = "STOP_COLON";
        #binding-cells = <0>;
        bindings = <&kp DOT>, <&kp COLON>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    qmark_excl: questionmark-exclamation {
        compatible = "zmk,behavior-mod-morph";
        label = "QUESTIONMARK_EXCLAMATION";
        #binding-cells = <0>;
        bindings = <&kp QMARK>, <&kp EXCL>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    slsh: forward-and-backslash {
        compatible = "zmk,behavior-mod-morph";
        label = "SLASHES";
        #binding-cells = <0>;
        bindings = <&kp FSLH>, <&kp BSLH>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    hash_buck: pound-dollar {
        compatible = "zmk,behavior-mod-morph";
        label = "HASH_BUCK";
        #binding-cells = <0>;
        bindings = <&kp POUND>, <&kp DOLLAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

    at_til: at-tilde {
        compatible = "zmk,behavior-mod-morph";
        label = "AT_TILDE";
        #binding-cells = <0>;
        bindings = <&kp AT>, <&kp GRAVE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
        };

     ZMK_MACRO(af,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EQUAL  &kp GT>;
    )

    };


    keymap {
            compatible = "zmk,keymap";

    #if LAYOUT == ENGRAM
        engram_layer {
            label = "Engram";
            bindings = <
       &kp TAB      &kp B        &kp Y       &kp O       &kp U          &sqt_lpar   &dqt_rpar       &kp L          &kp D       &kp W       &kp V         &kp Z
       &hash_buck   &hrml LCTRL C &hrml LALT I &hrml LGUI E &hrmls LSHFT A   &cma_semi   &stop_colon     &hrmrs RSHFT H   &hrmr RGUI T &hrmr RALT S &hrmr RCTRL N  &kp Q
       &at_til      &kp G        &kp X       &kp J       &kp K          &kp MINUS   &qmark_excl     &kp R          &kp M       &kp F       &kp P         &slsh
                                        &cwe &mqt KP_L BSPC  &mqt NUM_L LBKT  &mqt NUM_L RBKT &kp SPACE      &kp RETURN       
            >;
        };
    #elif LAYOUT == ENGRAMMER
        engrammer_layer {
            label = "Engram";
            bindings = <
       &kp TAB      &kp B        &kp Y       &kp O       &kp U          &kp SQT   &kp SEMI       &kp L          &kp D       &kp W       &kp V         &kp Z
       &mqt NAV_L EQUAL &hrml LCTRL C &hrml LALT I &hrml LGUI E &hrmls LSHFT A   &kp COMMA   &kp DOT  &hrmrs LSHFT H   &hrmr RGUI T &hrmr RALT S &hrmr RCTRL N  &mqt NAV_L Q
       &kp BSLH    &kp G        &kp X       &kp J       &kp K          &kp MINUS   &kp SLASH     &kp R          &kp M       &kp F       &kp P         &kp GRAVE
                                        &cwe &mqt KP_L BSPC  &mqt NUM_L LBKT  &mqt NUM_L RBKT &kp SPACE      &kp RETURN       
            >;
        };
    #else
        qwerty_layer {
            bindings = <
       &none        &kp Q      &kp W      &kp E       &kp R          &kp T         &kp Y            &kp U          &kp I       &kp O      &kp P    &none
       &none        &kp A      &kp S      &kp D       &kp F          &kp G         &kp H            &kp J          &kp K       &kp L      &kp QUOT &none
       &none        &kp Z      &kp X      &kp C       &kp V          &kp B         &kp N            &kp M          &kp COMMA   &kp DOT    &kp SEMI &none
                                        &cwe &mqt KP_L BSPC  &mqt NUM_L LBKT  &mqt NUM_L RBKT &kp SPACE      &kp RETURN       
            >;
        };
    #endif


// ;; I used #(sft /) to release the shift from rolls with <
// (deflayer navigation
//   _    _    _    _    _    _    _    _    _    _    _    _    _    _
//   _    !    @    [    ]    _    _    home pgdn pgup end  _    _    _
//   _ @clp @arp @mlb @srb  @af    _    @sl  @md  @au  @cr  _    _
//   < #(sft /) =   >    _    _    M-S-z M-z M-x  M-c  M-v  _    _
//   _    _    _    _              _              _    _    _    _    _
// )


        nav_layer {
            label = "Nav";
            bindings = <
       &trans   &kp EXCL   &kp AT     &kp LBKT    &kp RBKT           &bt BT_CLR         &bt BT_NXT         &kp  HOME       &kp PG_DN      &kp PG_UP   &kp END    &none
       &trans   &hrml LCTRL LPAR &hrml LALT RPAR &hrml LGUI LBRC &hrmls LSHFT RBRC  &af      &out OUT_TOG      &hrmrs LSHFT LARW   &hrmr RGUI DARW &hrmr RALT UARW &hrmr RCTRL RARW  &none
       &trans   &kp LT     &kp SLASH     &kp EQUAL      &kp GT             &trans         &kp LS(LG(Z))        &kp LG(Z)      &kp LG(X)   &kp LG(C)  &kp LG(V)     &none
                                   &trans       &trans             &trans         &trans      &trans    &trans
            >;
        };

    #if LAYOUT == ENGRAM
        num_layer {
            label = "Num";
            bindings = <
       &kp F1       &kp F2      &kp F3      &kp F4          &kp F5       &kp F6        &kp F7         &kp F8    &kp F9     &kp F10     &kp F11    &kp F12
       &kp LBRC     &kp PIPE    &kp EQUAL   &kp TILDE      &kp PLUS      &kp LT        &kp GT     &kp CARET     &kp AMPS   &kp PRCNT   &kp STAR   &kp RBRC
       &kp LBKT     &kp N1      &kp N2      &kp N3          &kp N4       &kp N5        &kp N6     &kp N7        &kp N8     &kp N9      &kp N0     &kp RBKT
                                          &trans   &trans          &trans        &trans       &trans &trans
            >;
        };
    #elif LAYOUT == ENGRAMMER
        num_layer {
            label = "Num";
            bindings = <
       &kp F1       &kp F2      &kp F3      &kp F4          &kp F5       &kp F6        &kp F7         &kp F8    &kp F9     &kp F10     &kp F11    &kp F12
       &kp LBRC     &kp EXCL    &kp AT   &kp POUND      &kp DOLLAR      &kp PERCENT    &kp CARET     &kp AMPS  &kp ASTRK   &kp LPAR   &kp RPAR   &kp RBRC
       &kp LBKT     &kp N1      &kp N2      &kp N3         &kp N4        &kp N5        &kp N6     &kp N7        &kp N8     &kp N9      &kp N0     &kp RBKT
                                          &trans   &trans          &trans        &trans        &trans &trans
            >;
        };
    #endif

        kp_layer {
            label = "Kp";
            bindings = <
       &trans         &trans  &trans     &trans      &trans         &trans   &kp KP_DIVIDE     &kp  KP_N7  &kp KP_N8   &kp KP_N9   &kp KP_MINUS      &none
       &trans         &trans  &trans     &trans      &trans         &trans &kp KP_MULTIPLY     &kp KP_N4    &kp KP_N5    &kp KP_N6   &kp KP_PLUS      &none
       &trans         &trans     &trans     &trans      &trans         &trans         &trans     &kp KP_N1   &kp KP_N2   &kp KP_N3  &kp KP_ENTER    &none
                                           &trans       &trans         &trans         &trans      &kp KP_N0    &kp KP_DOT
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
       &none         &trans	   &trans     &trans      &trans          &trans       &trans           &kp C_PREV     &kp C_VOL_DN    &kp C_VOL_UP &kp C_NEXT &none
       &none         &trans    &trans     &trans      &trans          &trans       &trans           &trans         &trans          &trans       &trans     &none
       &none         &trans    &trans     &trans      &trans          &trans       &trans           &trans         &kp C_PLAY_PAUSE &kp C_MUTE  &trans     &none
                                           &trans  &trans          &trans       &trans           &trans &trans
            >;
        };


		/*
                default_layer {
// -------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
//                         | ALT | LWR | SPC | RSE  | ALT |
            bindings = <
&bl BL_TOG &kp Q      &kp W      &kp F       &kp P          &kp B         &kp J            &kp L          &kp U       &kp Y      &kp QUOT &bootloader
&none &hm LGUI A &hm LALT R &hm LCTRL S &hm LSHFT T    &kp G         &kp M            &hm RSHFT N    &hm RCTRL E &hm LALT I &hm LGUI O &none
&none &kp Z      &kp X      &kp C       &kp D          &kp V         &kp K            &kp H          &kp COMMA   &kp DOT    &kp FSLH      &none
                                  &lt NAV_L TAB  &lt OTH_L RET &kp RET &lt NUM_L SPACE  &lt SYM_L BKSP
            >;
                };

        nav_layer {
            label = "Nav";
            bindings = <
&none                 &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans      &trans     &trans &none
&none                 &trans     &trans     &trans      &trans          &trans       &trans           &kp LARW       &kp DARW    &kp UARW   &kp RARW &none
&none                 &trans     &trans     &trans      &trans          &trans       &trans           &kp HOME       &kp PG_DN   &kp PG_UP  &kp END &none
                                                  &trans          &trans    &trans    &kp ESC          &kp DEL
            >;
        };

        other_layer {
            label = "Other";
            bindings = <
&none                 &trans	   &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &bt BT_CLR &none
&none                 &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans &none
&none                 &trans     &trans     &trans      &trans          &trans       &bt BT_SEL 0     &bt BT_SEL 1   &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
                                                  &trans          &trans   &trans     &trans           &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&none                 &kp LBKT   &kp N7     &kp N8      &kp N9          &kp RBKT      &trans          &trans         &trans      &trans     &trans &none
&none                 &kp SEMI   &kp N4     &kp N5      &kp N6          &kp EQUAL     &trans          &trans         &trans      &trans     &trans &none
&none                 &kp GRAVE  &kp N1     &kp N2      &kp N3          &kp BSLH      &trans          &trans         &trans      &trans     &trans &none
                                                  &kp N0          &kp MINUS   &trans   &trans          &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&none                 &kp LBRC     &kp LS(N7)  &kp LS(N8)  &kp LS(N9) &kp RBRC        &trans &trans   &trans    &trans    &trans &none
&none                 &kp COLON    &kp LS(N4)  &kp LS(N5)  &kp LS(N6) &kp PLUS        &trans &trans   &trans    &trans    &trans &none
&none                 &kp TILDE    &kp LS(N1)  &kp LS(N2)  &kp LS(N3) &kp LS(BSLH)    &trans &trans   &trans    &trans    &trans &none
                                                   &kp LS(N0) &kp UNDER      &trans    &trans &trans
            >;
        };
	*/

        };
};
