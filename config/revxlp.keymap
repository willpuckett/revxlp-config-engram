/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>

#ifndef LAYOUT
#define LAYOUT 0
#endif

#define QWERTY 0
#define QWERTY_FLIP 1
#define ENGRAM 2
#define ENGRAMMER 3

#define NUM_L 1
// #define NAV_L 2
// #define KP_L 3

#define KEYS_L 0 1 2 3 4  5  12 13 14 15 16 17 24 25 26 27 28 29// left-hand keys
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35// right-hand keys
#define THUMBS 36 37 38 39 40 41

// This HM_TAPPING_TERM was set to 1000 testing 280 now
#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 200
#define HM_TAPPING_TERM_QT 175

/ {
	behaviors {
		
		hl: home_row_mod_left {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM>;
			hold-trigger-key-positions = < KEYS_R THUMBS >;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		
		hr: home_row_mod_right {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM>;
			hold-trigger-key-positions = < KEYS_L THUMBS >;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		
		hls: home_row_mod_left_shift {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM_FAST>;
			require-prior-idle-ms = <HM_TAPPING_TERM_QT>;
			hold-trigger-key-positions = < KEYS_R THUMBS >;
			bindings = <&kp>, <&kp>;
		};
		
		hrs: home_row_mod_right_shift {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <HM_TAPPING_TERM_FAST>;
			require-prior-idle-ms = <HM_TAPPING_TERM_QT>;
			hold-trigger-key-positions = < KEYS_L THUMBS >;
			bindings = <&kp>, <&kp>;
		};
		
		mqt: momentary-quick-tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <125>;
			require-prior-idle-ms = <HM_TAPPING_TERM_QT>;
			bindings = <&mo>, <&kp>;
		};
		
		rpi: require-prior-idle {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;	
			require-prior-idle-ms = <HM_TAPPING_TERM_QT>;
			bindings = <&kp>, <&kp>;
		};

		cwe: tap_dance_mod_tap {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp ESC>, <&caps_word>;
		};
		
		sqt_lpar: single-quote-left-paren {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp SQT>, <&kp LPAR>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		dqt_rpar: double-quote-right-paren {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DQT>, <&kp RPAR>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		cma_semi: comma-semicolon {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp COMMA>, <&kp SEMI>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		stop_colon: stop-colon {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DOT>, <&kp COLON>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		qmark_excl: questionmark-exclamation {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp QMARK>, <&kp EXCL>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		slsh: forward-and-backslash {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp FSLH>, <&kp BSLH>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		hash_buck: pound-dollar {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp POUND>, <&kp DOLLAR>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		at_til: at-tilde {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp AT>, <&kp GRAVE>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LALT|MOD_LCTL|MOD_LGUI|MOD_RALT|MOD_RGUI|MOD_RCTL)>;
		};
		
		// ZMK_MACRO(af,
		// wait-ms = <30>;
		// tap-ms = <40>;
		// bindings = <&kp EQUAL  &kp GT>;
		// )
		
	};
	
	combos {
		compatible = "zmk,combos";
		#if LAYOUT == ENGRAMMER
		// combo_kp_l {
		// 	timeout-ms = <50>;
		// 	key-positions = <37 38>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&mo KP_L>;
		// };
		// combo_kp_r {
		// 	timeout-ms = <50>;
		// 	key-positions = <39 40>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&mo KP_L>;
		// };
		// combo_esc {
		// 	timeout-ms = <50>;
		// 	key-positions = <2 14>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp ESC>;
		// };
		// combo_caps_word {
		// 	timeout-ms = <50>;
		// 	key-positions = <3 15>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&caps_word>;
		// };

		// combo_z {
		// 	timeout-ms = <25>;
		// 	key-positions = <31 32>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp Z>;
		// };
		// combo_q {
		// 	timeout-ms = <25>;
		// 	key-positions = <33 34>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp Q>;
		// };
		// combo_x {
		// 	timeout-ms = <25>;
		// 	key-positions = <25 26>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp X>;
		// };
		// combo_j {
		// 	timeout-ms = <25>;
		// 	key-positions = <27 28>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp J>;
		// };
		combo_minus {
			timeout-ms = <25>;
			key-positions = <13 14>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp MINUS>;
		};
		combo_comma {
			timeout-ms = <25>;
			key-positions = <14 15>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp COMMA>;
		};
		combo_sqt {
			timeout-ms = <25>;
			key-positions = <15 16>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp SQT>;
		};
		combo_semi {
			timeout-ms = <25>;
			key-positions = <19 20>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp SEMI>;
		};
		combo_dot {
			timeout-ms = <25>;
			key-positions = <20 21>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp DOT>;
		};
		combo_slash {
			timeout-ms = <25>;
			key-positions = <21 22>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp SLASH>;
		};
		// combo_grave {
		// 	timeout-ms = <25>;
		// 	key-positions = <2 3>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp GRAVE>;
		// };
		// combo_excl {
		// 	timeout-ms = <25>;
		// 	key-positions = <3 4>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp EXCL>;
		// };
		// combo_at {
		// 	timeout-ms = <25>;
		// 	key-positions = <4 16>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp AT>;
		// };
		// combo_bslh {
		// 	timeout-ms = <25>;
		// 	key-positions = <9 21>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp BSLH>;
		// };
		// combo_equal {
		// 	timeout-ms = <25>;
		// 	key-positions = <8 20>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp EQUAL>;
		// };
		// #define KEYS_R 
		// 6  7  8  9  10 11 
		// 18 19 20 21 22 23 
		// 30 31 32 33 34 35// right-hand keys

		// combo_lpar {
		// 	timeout-ms = <25>;
		// 	key-positions = <13 15>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp LPAR>;
		// };
		// combo_rpar {
		// 	timeout-ms = <25>;
		// 	key-positions = <14 16>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp RPAR>;
		// };
		// combo_lbrkt {
		// 	timeout-ms = <25>;
		// 	key-positions = <25 27>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp LBKT>;
		// };
		// combo_rbrkt {
		// 	timeout-ms = <25>;
		// 	key-positions = <26 28>;
		// 	layers = <0>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp RBKT>;
		// };

		// combo_f1 {
		// 	timeout-ms = <25>;
		// 	key-positions = <26 27>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F1>;
		// };
		// combo_f2 {
		// 	timeout-ms = <25>;
		// 	key-positions = <26 28>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F2>;
		// };
		// combo_f3 {
		// 	timeout-ms = <25>;
		// 	key-positions = <27 28>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F3>;
		// };
		// combo_f4 {
		// 	timeout-ms = <25>;
		// 	key-positions = <14 15>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F4>;
		// };
		// combo_f5 {
		// 	timeout-ms = <25>;
		// 	key-positions = <14 16>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F5>;
		// };
		// combo_f6 {
		// 	timeout-ms = <25>;
		// 	key-positions = <15 16>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F6>;
		// };
		// combo_f7 {
		// 	timeout-ms = <25>;
		// 	key-positions = <2 3>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F7>;
		// };
		// combo_f8 {
		// 	timeout-ms = <25>;
		// 	key-positions = <2 4>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F8>;
		// };
		// combo_f9 {
		// 	timeout-ms = <25>;
		// 	key-positions = <3 4>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F9>;
		// };
		// combo_f10 {
		// 	timeout-ms = <25>;
		// 	key-positions = <25 26>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F10>;
		// };
		// combo_f11 {
		// 	timeout-ms = <25>;
		// 	key-positions = <13 25>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F11>;
		// };
		// combo_f12 {
		// 	timeout-ms = <25>;
		// 	key-positions = <13 14>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp F12>;
		// };

				// #define KEYS_L 
		// 0  1  2  3  4  5  
		// 12 13 14 15 16 17 
		// 24 25 26 27 28 29// left-hand keys
		// combo_kp_enter {
		// 	timeout-ms = <50>;
		// 	key-positions = <16 28>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp KP_ENTER>;
		// };
		// combo_exponent {
		// 	timeout-ms = <50>;
		// 	key-positions = <4 16>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp CARET>;
		// };
		// combo_kp_plus {
		// 	timeout-ms = <50>;
		// 	key-positions = <15 27>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp KP_PLUS>;
		// };
		// combo_kp_minus {
		// 	timeout-ms = <50>;
		// 	key-positions = <3 15>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp KP_MINUS>;
		// };
		// combo_kp_multiply {
		// 	timeout-ms = <50>;
		// 	key-positions = <14 26>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp KP_MULTIPLY>;
		// };
		// combo_kp_divide {
		// 	timeout-ms = <50>;
		// 	key-positions = <2 14>;
		// 	layers = <NUM_L>;
		// 	require-prior-idle-ms = <175>;
		// 	bindings = <&kp KP_DIVIDE>;
		// };
		#endif
		#if LAYOUT != ENGRAM
		combo_1 {
			timeout-ms = <50>;
			key-positions = <0 12>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt EXCL N1>;
		};
		combo_2 {
			timeout-ms = <50>;
			key-positions = <1 13>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt AT N2>;
		};
		combo_3 {
			timeout-ms = <50>;
			key-positions = <2 14>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt HASH N3>;
		};
		combo_4 {
			timeout-ms = <50>;
			key-positions = <3 15>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt DOLLAR N4>;
		};
		combo_5 {
			timeout-ms = <50>;
			key-positions = <4 16>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt PERCENT N5>;
		};
		combo_6 {
			timeout-ms = <50>;
			key-positions = <5 17>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt CARET N6>;
		};
		combo_7 {
			timeout-ms = <50>;
			key-positions = <6 18>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt AMPS N7>;
		};
		combo_8 {
			timeout-ms = <50>;
			key-positions = <7 19>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt STAR N8>;
		};
		combo_9 {
			timeout-ms = <50>;
			key-positions = <8 20>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt LPAR N9>;
		};
		combo_0 {
			timeout-ms = <50>;
			key-positions = <9 21>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt RPAR N0>;
		};
		combo_lbrkt {
			timeout-ms = <50>;
			key-positions = <10 22>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt LBRC LBKT>;
		};
		combo_rbrkt {
			timeout-ms = <50>;
			key-positions = <11 23>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt RBRC RBKT>;
		};

		#endif
		#if LAYOUT == ENGRAM
		combo_lbrkt {
			timeout-ms = <50>;
			key-positions = <0 12>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt LBRC LBKT>;
		};
		combo_1 {
			timeout-ms = <50>;
			key-positions = <1 13>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt PIPE N1>;
		};
		combo_2 {
			timeout-ms = <50>;
			key-positions = <2 14>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt EQUAL N2>;
		};
		combo_3 {
			timeout-ms = <50>;
			key-positions = <3 15>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt TILDE N3>;
		};
		combo_4 {
			timeout-ms = <50>;
			key-positions = <4 16>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt PLUS N4>;
		};
		combo_5 {
			timeout-ms = <50>;
			key-positions = <5 17>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt LT N5>;
		};
		combo_6 {
			timeout-ms = <50>;
			key-positions = <6 18>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt GT N6>;
		};
		combo_7 {
			timeout-ms = <50>;
			key-positions = <7 19>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt CARET N7>;
		};
		combo_8 {
			timeout-ms = <50>;
			key-positions = <8 20>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt AMPS N8>;
		};
		combo_9 {
			timeout-ms = <50>;
			key-positions = <9 21>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt PERCENT N9>;
		};
		combo_0 {
			timeout-ms = <50>;
			key-positions = <10 22>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt STAR N0>;
		};
		combo_rbrkt {
			timeout-ms = <50>;
			key-positions = <11 23>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt RBRC RBKT>;
		};

		#endif

		combo_undo {
			timeout-ms = <50>;
			key-positions = <13 25>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp LG(Z)>;
		};
		combo_cut {
			timeout-ms = <50>;
			key-positions = <14 26>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp LG(X)>;
		};
		combo_copy {
			timeout-ms = <50>;
			key-positions = <15 27>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp LG(C)>;
		};
		combo_paste {
			timeout-ms = <50>;
			key-positions = <16 28>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&kp LG(V)>;
		};

		combo_left {
			timeout-ms = <50>;
			key-positions = <19 31>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt HOME LEFT>;
		};
		combo_down {
			timeout-ms = <50>;
			key-positions = <20 32>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt PG_DN DOWN>;
		};
		combo_up {
			timeout-ms = <50>;
			key-positions = <21 33>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt PG_UP UP>;
		};
		combo_right {
			timeout-ms = <50>;
			key-positions = <22 34>;
			layers = <0>;
			require-prior-idle-ms = <175>;
			bindings = <&mt END RIGHT>;
		};
		


	};



	
	keymap {
		compatible = "zmk,keymap";
		
    #if LAYOUT == ENGRAM
		engram_layer {
			bindings = <
			&rpi F1 ESC         &rpi F2 B        &rpi F3 Y       &rpi F4 O       &rpi F5 U    &sqt_lpar      &dqt_rpar       &rpi F8 L          &rpi F9 D       &rpi F10 W       &rpi F11 V         &rpi F12 Z
			&hash_buck   &hl LCTRL C  &hl LALT I  &hl LGUI E &hls LSHFT A   &cma_semi   &stop_colon     &hrs RSHFT H   &hr RGUI T &hr RALT S &hr RCTRL N  &kp Q
			&at_til      &kp G        &kp X       &kp J       &kp K          &kp MINUS   &qmark_excl     &kp R          &kp M       &kp F       &kp P         &slsh
			&none &mqt NUM_L TAB &mqt NUM_L BSPC &mqt NUM_L SPACE &mqt NUM_L RETURN &none
			>;
		};
		#elif LAYOUT == ENGRAMMER
		engrammer_layer {
			bindings = <
			&rpi F1 TILDE &rpi F2 J         &rpi F3 Y           &rpi F4 O       &mt 5 U        &rpi F6 SQT &rpi F7 SEMI  &rpi F8 L        &rpi F9 D      &rpi F10 W      &rpi F11 X       &rpi F12 Z
			&cwe &hl LCTRL C   &hl LALT I      &hl LGUI E  &hls LSHFT A &kp COMMA &kp DOT  &hrs LSHFT H &hr RGUI T &hr RALT S &hr RCTRL N &kp Q
			&kp BSLH &kp G         &kp B      	    &kp V       &kp K        &kp MINUS &kp SLASH  &kp R        &kp M      &kp F      &kp P       &kp EQUAL
			&none &mqt NUM_L TAB &mqt NUM_L BSPC &mqt NUM_L SPACE &mqt NUM_L RETURN &none
			>;
		};
		#elif LAYOUT == QWERTY_FLIP
		qwerty_flip_layer {
			bindings = <
			&rpi F1 GRAVE &rpi F2 Q  &rpi F3 W   &rpi F4 D   &rpi F5 F     &rpi F6 G    &rpi F7 Y &rpi F8 J   &rpi F9 K  &rpi F10 L  &rpi F11 SEMI &rpi F12 BSLH
			&cwe      &hl LCTRL A  &hl LALT S &hl LGUI E &hls LSHFT R &kp T       &kp H &hrs RSHFT U &hr RGUI I &hr RALT O &hr RCTRL P &kp SQT
			&kp MINUS &kp Z          &kp X        &kp C        &kp V          &kp B       &kp N &kp M          &kp COMMA    &kp DOT      &kp SLASH     &kp EQUAL
			&none &mqt NUM_L TAB &mqt NUM_L BSPC &mqt NUM_L SPACE &mqt NUM_L RETURN &none
			>;
		};
    #else
		qwerty_layer {
			bindings = <
			&rpi F1 GRAVE &rpi F2 Q       &rpi F3 W      &rpi F4 E       &rpi F5 R        &rpi F6 T &rpi F7 Y &rpi F8 U        &rpi F9 I      &rpi F10 O      &rpi F11 P          &rpi F12 BSLH
			&caps_word      &hl LCTRL A &hl LALT S &hl LGUI D  &hls LSHFT F &kp G &kp H &hrs RSHFT J &hr RGUI K &hr RALT L &hr RCTRL SEMI &kp SQT
			&kp MINUS &kp Z       &kp X      &kp C       &kp V        &kp B &kp N &kp M        &kp COMMA  &kp DOT    &kp SLASH      &kp EQUAL
			&kp ESC &mqt NUM_L TAB &mqt NUM_L BSPC &mqt NUM_L SPACE &mqt NUM_L RETURN &none
			>;
		};
    #endif

    #if LAYOUT == ENGRAM
		num_layer {
			bindings = <
			&none &none       &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS &none &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE      &none &none
			&kp KP_DIVIDE &kp KP_N0   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS &none &hrs LSHFT H &hr RGUI T &hr RALT S &hr RCTRL N &none
			&kp KP_MULTIPLY &kp KP_DOT  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER &none &bt BT_CLR     &bt BT_NXT   &out OUT_BLE   &out OUT_USB &none
			&none &none &none &none &none &none
			>;
		};
    #else
		num_layer {
			bindings = <
			&none &none   		 &mt KP_N7 N7 &mt KP_N8 N8 &mt KP_N9 N9 &kp KP_MINUS &none &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE      &none &none
			&kp KP_DIVIDE &mt KP_N0 N0   &mt KP_N4 N4 &mt KP_N5 N5 &mt KP_N6 N6 &kp KP_PLUS &none &hrs LSHFT H &hr RGUI T &hr RALT S &hr RCTRL N &none
			&kp KP_MULTIPLY &mt KP_DOT DOT &mt KP_N1 N1 &mt KP_N2 N2 &mt KP_N3 N3 &kp KP_ENTER &none &bt BT_CLR     &bt BT_NXT   &out OUT_BLE   &out OUT_USB &none
			&none &none &none &none &none &none
			>;
		};
    #endif

	// #if LAYOUT != ENGRAMMER
	// 	nav_layer {
	// 		bindings = <
	// 		&none   &none   		&kp AT     		&kp LBKT    	&kp RBKT        &none   &none    &none			&none 			&none 			&none   		&none
	// 		&none   &hl LCTRL LPAR 	&hl LALT RPAR 	&hl LGUI LBRC 	&hls LSHFT RBRC	&none	&none   &hrs LSHFT LARW &hr RGUI DARW 	&hr RALT UARW 	&hr RCTRL RARW  &none
	// 		&none   &kp LT     		&kp SLASH     	&kp EQUAL      	&kp GT          &none   &none    	&kp  HOME       &kp PG_DN      	&kp PG_UP   	&kp END      	&none
	// 		&none   &kp BSLH  		&kp PIPE     	&kp HASH    	&kp DOLLAR 		&none
	// 		>;
	// 	};
	// #endif
	};
};

